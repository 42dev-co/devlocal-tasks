version: '3'

dotenv:
  - setup.config

vars:
  CLUSTER_SUFFIX: 
    sh: |
      echo {{.K8S_VERSION }}  | awk -F. '{print $1"-"$2}'
  
  CLUSTER_NAME: "{{.CLUSTER_PREFIX}}-{{.CLUSTER_SUFFIX}}"
  
  IS_MICROSOFT:
    sh: |
      kernal_release=$(uname -r)
      # if kernal_release contains "microsoft" or "Microsoft" then return true, otherwise false
      if [[ $kernal_release == *"microsoft"* ]] || [[ $kernal_release == *"Microsoft"* ]]; then
        echo "true"
      else
        echo "false"
      fi

tasks:
  default:
    silent: true
    desc: "Prints the list of available tasks"
    cmds:
      - task --list

  debug:
    silent: true
    desc: "Prints the environment variables"
    cmds:
      - |
        echo "CLUSTER_PREFIX:                 {{.CLUSTER_PREFIX}}"
        echo "K8S_VERSION:                    {{.K8S_VERSION}}"
        echo "CLUSTER_NAME:                   {{.CLUSTER_NAME}}"
        echo "IS_MICROSOFT:                   {{.IS_MICROSOFT}}"
        echo "CPU:                            {{.CPU}}"
        echo "MEM:                            {{.MEM}}"
        echo "CNI:                            {{.CNI}}"
        echo "ENABLE_MINIKUBE_INGRESS:        {{.ENABLE_MINIKUBE_INGRESS}}"
        echo "ENABLE_MINIKUBE_DASHBOARD:      {{.ENABLE_MINIKUBE_DASHBOARD}}"
        echo "ENABLE_MINIKUBE_METRICS_SERVER: {{.ENABLE_MINIKUBE_METRICS_SERVER}}"
        echo "ARGOCD_VERSION:                 {{.ARGOCD_VERSION}}"
        echo "DOMAIN:                         {{.DOMAIN}}"
        echo "KUBESEAL_SECRET_KEY_FILE:       {{.KUBESEAL_SECRET_KEY_FILE}}"
        echo "PATH_TO_SSH_KEY:                {{.PATH_TO_SSH_KEY}}"
        echo "SYSTEM_APP_OF_APPS:             {{.SYSTEM_APP_OF_APPS}}"
        echo "APPLICATION_APP_OF_APPS:        {{.APPLICATION_APP_OF_APPS}}"

  status:
    silent: true
    desc: "Prints the status of the K8s cluster"
    cmds:
      - task: MINIKUBE_LS

  up:
    desc: "Create, bootstrap and start the K8s cluster"
    cmds:
      - echo "Starting the cluster with the following configuration"
      - task: debug
      - task: MINIKUBE_START
        vars:
          profile: "{{.CLUSTER_NAME}}"
          version: "{{.K8S_VERSION}}"
          cpu: "{{.CPU}}"
          memory: "{{.MEM}}"
          cni: "{{.CNI}}"
      - task: MINIKUBE_USE_PROFILE
        vars:
          profile: "{{.CLUSTER_NAME}}"
      - task: ENABLE_MINIKUBE_INGRESS
        vars:
          enable: "{{.ENABLE_MINIKUBE_INGRESS}}"
      - task: PATCH_INGRESS_WSL
        vars:
          is_microsoft: "{{.IS_MICROSOFT}}"
          is_enabled: "{{.ENABLE_MINIKUBE_INGRESS}}"
      - task: ENABLE_MINIKUBE_DASHBOARD
        vars:
          enable: "{{.ENABLE_MINIKUBE_DASHBOARD}}"
      - task: ENABLE_MINIKUBE_METRICS_SERVER
        vars:
          enable: "{{.ENABLE_MINIKUBE_METRICS_SERVER}}"
      - task: INSTALL_ARGOCD
        vars:
          version: "{{.ARGOCD_VERSION}}"
          domain: "{{.DOMAIN}}"
      - task: INSTALL_KUBESEAL
      - task: BOOTSTRAP_ARGO

  down: 
    desc: "Delete devlocal cluster with devkit"
    cmds:
      - task: MINIKUBE_RM
        vars:
          profile: '{{.CLUSTER_NAME}}'

# Internal Tasks
  INSTALL_KUBESEAL:
    internal: true
    silent: true
    desc: "Install kubeseal"
    cmds:
      - |
        helm upgrade --install sealed-secrets-controller sealed-secrets \
          --repo https://charts.bitnami.com/bitnami \
          --namespace kube-system \
          --create-namespace \
          --set keyRotation.enabled=false \
          --wait
      - task: BACKUP_KUBESEAL_SECRET_KEY
      - task: RESTORE_KUBESEAL_SECRET_KEY

  RESTORE_KUBESEAL_SECRET_KEY:
    internal: true
    silent: true
    desc: "Restore kubeseal"
    cmds:
      - |
        # check if the secret file exists and if it does, restore it
        if [ -f {{.TASKFILE_DIR}}/{{.KUBESEAL_SECRET_KEY_FILE}} ]; then
          kubectl apply -f {{.TASKFILE_DIR}}/{{.KUBESEAL_SECRET_KEY_FILE}}
        fi 

  BACKUP_KUBESEAL_SECRET_KEY:
    internal: true
    silent: true
    desc: "Backup kubeseal"
    cmds:
      - |
        # check if the secret file exists
        if [ ! -f {{.TASKFILE_DIR}}/{{.KUBESEAL_SECRET_KEY_FILE}} ]; then
          kubectl get secret -n kube-system sealed-secrets-key -o yaml > {{.TASKFILE_DIR}}/{{.KUBESEAL_SECRET_KEY_FILE}}
        fi

  INSTALL_ARGOCD:
    internal: true
    silent: true
    desc: "Install ArgoCD"
    vars:
      version: '{{ default "7.5.2"  .version }}'
      domain: '{{ default "argocd.local" .domain }}'
    cmds:
      - |
        helm upgrade --install argocd argo-cd \
          --repo https://argoproj.github.io/argo-helm \
          --namespace argocd \
          --create-namespace \
          --version={{.version}} \
          --set global.domain="{{.domain}}" \
          --set server.service.type=NodePort \
          --set server.extraArgs="{--insecure}" \
          --set server.ingress.enabled=true \
          --set server.ingress.hosts[0]="argocd.{{.domain}}" \
          --wait  

  MINIKUBE_START:
    internal: true
    silent: true
    desc: "Create K8s cluster or start existing. Required: profile:string, version:string. E.g k8s-start profile=dev-1-30 version=1.30.0"
    vars:
      profile: '{{ default "" .profile}}'
      version: '{{ default "latest" .version }}' # Default value if not provided
      cpu:     '{{ default "2" .cpu }}'
      cni:     '{{ default "calico" .cni }}'
      memory:  '{{ default "4096" .memory }}'
    cmds:
      - |
        # Exit if no profile is provided
        if [ -z "{{.profile}}" ]; then
          echo "Required profile not provided"
          exit 1
        fi

        # check if profile exists, if exists , check if it is running, if not start it, otherwise continue
        if minikube profile list | grep -q "{{ .profile }}"; then
          if minikube profile list | grep -q "{{ .profile }}.*Running"; then
            echo "Profile {{ .profile }} is already running"
          else
            minikube start --profile="{{ .profile }}" 
          fi
          echo "Exiting..."
          exit 1
        fi

        # Exit if no version is provided
        if [ -z "{{.version}}" ]; then
          echo "Required version not provided"
          exit 1
        fi

        # start minikube with provided version
        minikube start --profile="{{ .profile }}" --kubernetes-version={{ .version }} --cpus={{ .cpu }} --memory={{ .memory }} --cni={{ .cni }}

  MINIKUBE_RM:
    internal: true
    silent: true
    desc: "Start K8s. Required: profile:string"
    vars:
      profile: '{{ default "" .profile}}'
    cmds:
      - |
        [[ -z "{{ .profile }}" ]] && { echo "Required profile not provided"; exit 1; } || minikube delete --profile="{{ .profile }}"

  MINIKUBE_USE_PROFILE:
    internal: true
    silent: true
    desc: "Use K8s profile. Required: profile:string"
    vars:
      profile: '{{ default "" .profile }}'
    cmds:
      - |
        [[ -z "{{ .profile }}" ]] && { echo "Required profile not provided"; exit 1; }
        minikube profile {{.profile}} >> /dev/null
      - task: MINIKUBE_LS

  MINIKUBE_LS:
    internal: true
    silent: true
    desc: List installed K8s installed
    cmds:
      - |
        minikube profile list

  ENABLE_MINIKUBE_METRICS_SERVER:
    internal: true
    silent: true
    desc: "Enable metrics server"
    vars:
      enable: '{{ default "false" .enable }}'
    cmds:
      - task: ENABLE_MINIKUBE_ADDON
        vars:
          addon: metrics-server
          enable: "{{.enable}}"

  ENABLE_MINIKUBE_DASHBOARD:
    internal: true
    silent: true
    desc: "Enable dashboard"
    vars:
      enable: '{{ default "false" .enable }}'
    cmds:
      - task: ENABLE_MINIKUBE_ADDON
        vars:
          addon: dashboard
          enable: "{{.enable}}"

  ENABLE_MINIKUBE_INGRESS:
    internal: true
    silent: true
    desc: "Enable ingress"
    vars:
      enable: '{{ default "false" .enable }}'
    cmds:
      - task: ENABLE_MINIKUBE_ADDON
        vars:
          addon: ingress
          enable: "{{.enable}}"

  ENABLE_MINIKUBE_ADDON:
    internal: true
    silent: true
    desc: "Enable addon. Required: addon:string"
    vars:
      addon: '{{ default "" .addon }}'
      enable: '{{ default "false" .enable }}'
    cmds:
      - |
        # if enable is true then enable the addon
        [[ "{{.enable}}" == "true" ]] && [[ -z "{{ .addon }}" ]] && { echo "Required addon not provided"; exit 1; } || minikube addons enable {{ .addon }}

  PATCH_INGRESS_WSL:
    internal: true
    silent: true
    desc: "Patch ingress for WSL"
    vars:
      is_microsoft: '{{ default "false" .is_microsoft }}'
      is_enabled: '{{ default "false" .is_enabled }}'
    cmds:
      - |
        if [[ "{{.is_microsoft}}" == "true" ]] && [[ "{{.is_enabled}}" == "true" ]]; then
          kubectl patch svc ingress-nginx-controller -n ingress-nginx -p '{"spec": {"type": "LoadBalancer"}}'
        fi

  BOOTSTRAP_ARGO:
    internal: true
    silent: true
    desc: "Bootstrap ArgoCD"
    cmds:
      - | # Setup SSH Secret for Gitlab and Github access
        if [[ -n "{{.PATH_TO_SSH_KEY}}" ]]; then
        ssh_key=$(sed 's/^/    /' {{.PATH_TO_SSH_KEY}})

        kubectl apply -f - <<EOF
        apiVersion: v1
        kind: Secret
        metadata:
          name: gitlab-ssh-key
          namespace: argocd
          labels:
            argocd.argoproj.io/secret-type: repo-creds
        type: Opaque
        stringData:
          url: "git@gitlab.com:"  # Wildcard for all GitLab repositories
          sshPrivateKey: |
        ${ssh_key}
        EOF

        kubectl apply -f - <<EOF
        apiVersion: v1
        kind: Secret
        metadata:
          name: github-ssh-key
          namespace: argocd
          labels:
            argocd.argoproj.io/secret-type: repo-creds
        type: Opaque
        stringData:
          url: "git@github.com:"  # Wildcard for all GitHub repositories
          sshPrivateKey: |
        ${ssh_key}
        EOF
        ### if you need other than gitlab and github, you can add more here ###
        fi
      - | # System App of Apps
        if [[ -n "{{.SYSTEM_APP_OF_APPS}}" ]]; then
          kubectl apply -f - <<EOF
        apiVersion: argoproj.io/v1alpha1
        kind: Application
        metadata:
          name: system-apps
          namespace: argocd
        spec:
          project: default
          source:
            repoURL: {{.SYSTEM_APP_OF_APPS}}  # GitLab repository URL
            path: apps                     # Path to the child applications directory
            targetRevision: main            # Use the default branch or specify another
          destination:
            server: https://kubernetes.default.svc  # Kubernetes API server
            namespace: argocd                       # Target namespace in ArgoCD
          syncPolicy:
            automated:
              prune: true        # Automatically remove resources not in Git
              selfHeal: true     # Automatically sync if out of sync
        EOF
        fi

      - | # Application App of Apps
        if [[ -n "{{.APPLICATION_APP_OF_APPS}}" ]]; then
          kubectl apply -f - <<EOF
        apiVersion: argoproj.io/v1alpha1
        kind: Application
        metadata:
          name: application-apps
          namespace: argocd
        spec:
          project: default
          source:
            repoURL: {{.APPLICATION_APP_OF_APPS}}  # GitLab repository URL
            path: apps                     # Path to the child applications directory
            targetRevision: main            # Use the default branch or specify another
          destination:
            server: https://kubernetes.default.svc  # Kubernetes API server
            namespace: argocd                       # Target namespace in ArgoCD
          syncPolicy:
            automated:
              prune: true        # Automatically remove resources not in Git
              selfHeal: true     # Automatically sync if out of sync
        EOF
        fi